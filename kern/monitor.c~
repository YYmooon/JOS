// Simple command-line kernel monitor useful for
// controlling the kernel and exploring the system interactively.

#include <inc/stdio.h>
#include <inc/string.h>
#include <inc/memlayout.h>
#include <inc/assert.h>
#include <inc/x86.h>
#include <inc/mmu.h>

#include <kern/console.h>
#include <kern/monitor.h>
#include <kern/kdebug.h>
#include <kern/pmap.h>

#define CMDBUF_SIZE	80	// enough for one VGA text line
#define CHECKPARA(a) do {if (a) {cprintf("wrong paramter\n"); return 0; }} while(0)

struct Command {
	const char *name;
	const char *desc;
	// return -1 to force monitor to exit
	int (*func)(int argc, char** argv, struct Trapframe* tf);
};

static struct Command commands[] = {
	{ "help", "Display this list of commands", mon_help },
	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
	{ "backtrace", "Do a backtrace of current stack", mon_backtrace },
	{ "showmapping", "Display pages mapping information", mon_showmapping },
	{ "mappingtool", "Explicitly set, clear, or change the permissions of any mapping in the current address space", mon_mappingtool },
	{ "dump", "Dump the contents of a range of memory given either a virtual or physical address range", mon_dump },
};
#define NCOMMANDS (sizeof(commands)/sizeof(commands[0]))

/***** Implementations of basic kernel monitor commands *****/



int
mon_help(int argc, char **argv, struct Trapframe *tf)
{
	int i;

	for (i = 0; i < NCOMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].desc);
	return 0;
}

int
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)
{
	extern char _start[], entry[], etext[], edata[], end[];

	cprintf("Special kernel symbols:\n");
	cprintf("  _start                  %08x (phys)\n", _start);
	cprintf("  entry  %08x (virt)  %08x (phys)\n", entry, entry - KERNBASE);
	cprintf("  etext  %08x (virt)  %08x (phys)\n", etext, etext - KERNBASE);
	cprintf("  edata  %08x (virt)  %08x (phys)\n", edata, edata - KERNBASE);
	cprintf("  end    %08x (virt)  %08x (phys)\n", end, end - KERNBASE);
	cprintf("Kernel executable memory footprint: %dKB\n",
		ROUNDUP(end - entry, 1024) / 1024);
	return 0;
}

int
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
	// Your code here.
	uint32_t * ebp;
	ebp = (uint32_t *)read_ebp();

	cprintf("Stack backtrace:\n");
	while(ebp != 0){
		cprintf("  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n", 
			ebp, (uint32_t *)ebp[1], ebp[2], ebp[3], ebp[4] , ebp[5], ebp[6]);
		struct Eipdebuginfo  dinfo;
		debuginfo_eip((uintptr_t)(uint32_t *)ebp[1], &dinfo);
		char tmpname[30];
		strcpy(tmpname, dinfo.eip_fn_name);
		tmpname[dinfo.eip_fn_namelen] = '\0';
		cprintf("         %s:%d: %s+%u\n", dinfo.eip_file, dinfo.eip_line, tmpname, (uint32_t)ebp[1] - dinfo.eip_fn_addr);
		ebp = (uint32_t *)ebp[0];
		
	}
	return 0;

}
int
mon_showmapping(int argc, char **argv, struct Trapframe *tf)
{
	uint32_t va_begin = 0, va_end = 0;
	char *endptrb, *endptre;
	CHECKPARA(argc != 2 && argc != 3);
	if (argc == 2) 
	{	
		va_begin = ROUNDDOWN((uint32_t)strtol(argv[1], &endptrb, 0),PGSIZE);
		va_end = va_begin;
		CHECKPARA( *endptrb != '\0');
	}
	else if (argc == 3) 
	{
		va_begin = ROUNDDOWN((uint32_t)strtol(argv[1], &endptrb, 0),PGSIZE);
		va_end = ROUNDUP((uint32_t)strtol(argv[2], &endptre, 0),PGSIZE);
		CHECKPARA(*endptrb != '\0' || *endptre != '\0');
	}
	cprintf("Virtual\tPhysical\tFlags\t\tRefer\n");
	while(va_begin <= va_end)
	{
		struct PageInfo *pp;
		pte_t *pteptr;
		char buf[13];
		pp = page_lookup(kern_pgdir, (void *)va_begin, &pteptr);
		if (pp == NULL || *pteptr ==0)
			cprintf("0x%08x\t%s\t\t%s\t\t%d\n", va_begin, "None", "None", 0);
		else
			cprintf("0x%08x\t0x%08x\t%s\t%d\n", va_begin, page2pa(pp),"Flag2Str"/*flag2str(*pteptr, buf)*/, pp->pp_ref );
		va_begin += PGSIZE;
	}
	
	return 0;
	
	
	
}

int
mon_mappingtool(int argc, char **argv, struct Trapframe *tf){
	CHECKPARA(argc < 3 || argc > 4);
	uintptr_t addr = strtol(argv[2], NULL, 0);
	addr = ROUNDDOWN(addr, PGSIZE);
	pte_t * pte_ptr;
	struct PageInfo * pp;
	pp = page_lookup(kern_pgdir, (void *)addr, &pte_ptr);
	if (pp == NULL || *pte_ptr == 0){	
		cprintf("no mapping here\n");
		return 0;
	}
	if(strcmp(argv[1],"set")==0 || strcmp(argv[1],"change")==0){
		CHECKPARA(argc != 4);
		int perm = strtol(argv[3],0,0);
		*pte_ptr &=0xfffff000;
		*pte_ptr |=perm;
	}
	else if(strcmp(argv[1],"clear")==0){
		*pte_ptr &=0xfffff000;
	}
	else{
		cprintf("Can find this operator!\n");
		cprintf("command can be : (1)set\n (2)change\n (3)clear\n");
	}
	return 0;
}

int
mon_dump(int argc, char **argv, struct Trapframe *tf){

	return 0;
}


/***** Kernel monitor command interpreter *****/

#define WHITESPACE "\t\r\n "
#define MAXARGS 16

static int
runcmd(char *buf, struct Trapframe *tf)
{
	int argc;
	char *argv[MAXARGS];
	int i;

	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
	argv[argc] = 0;
	while (1) {
		// gobble whitespace
		while (*buf && strchr(WHITESPACE, *buf))
			*buf++ = 0;
		if (*buf == 0)
			break;

		// save and scan past next arg
		if (argc == MAXARGS-1) {
			cprintf("Too many arguments (max %d)\n", MAXARGS);
			return 0;
		}
		argv[argc++] = buf;
		while (*buf && !strchr(WHITESPACE, *buf))
			buf++;
	}
	argv[argc] = 0;

	// Lookup and invoke the command
	if (argc == 0)
		return 0;
	for (i = 0; i < NCOMMANDS; i++) {
		if (strcmp(argv[0], commands[i].name) == 0)
			return commands[i].func(argc, argv, tf);
	}
	cprintf("Unknown command '%s'\n", argv[0]);
	return 0;
}

void
monitor(struct Trapframe *tf)
{
	char *buf;

	cprintf("Welcome to the JOS kernel monitor!\n");
	cprintf("Type 'help' for a list of commands.\n");


	while (1) {
		buf = readline("K> ");
		
		if (buf != NULL)
			if (runcmd(buf, tf) < 0)
				break;
	}
}
